module kernel {

rpc void  add_timer( projection timer* timer ) {
		/*projection < struct hlist_node> hlist_node {
			projection hlist_node_hlist_node** pprev;
		}*/
	projection < struct timer_list > timer {
		projection hlist_node entry;
		long unsigned int [in, out] expires;
	}
	projection < struct hlist_node > hlist_node {
	}
}
rpc void  complete( projection x* [in, out] x ) {
	projection < struct completion > x {
		unsigned int [in, out] done;
	}
}
rpc int  del_timer( projection timer* [in] timer ) {
		/*projection < struct hlist_node> hlist_node {
			projection hlist_node_hlist_node** pprev;
		}*/
	projection < struct timer_list > timer {
		projection hlist_node entry;
	}
	projection < struct hlist_node > hlist_node {
	}
}
rpc int  del_timer_sync( projection timer* [in] timer ) {
		/*projection < struct hlist_node> hlist_node {
			projection hlist_node_hlist_node** pprev;
		}*/
	projection < struct timer_list > timer {
		projection hlist_node entry;
	}
	projection < struct hlist_node > hlist_node {
	}
}

rpc void  free_irq( unsigned int  irq, void*  dev_id ) {
}
rpc void  init_timer_key( projection timer* [in] timer, unsigned int  flags, char*  name, projection key*  key ) {
		/*projection < struct hlist_node> hlist_node {
			projection hlist_node_hlist_node** pprev;
		}*/
	projection < struct timer_list > timer {
		projection hlist_node entry;
	}
	projection < struct hlist_node > hlist_node {
	}
	projection < struct lock_class_key > key {
	}
}
rpc int  mod_timer( projection timer* [in, out] timer, long unsigned int  expires ) {
		/*projection < struct hlist_node> hlist_node {
			projection hlist_node_hlist_node** pprev;
		}*/
	projection < struct timer_list > timer {
		projection hlist_node entry;
		long unsigned int [in, out] expires;
	}
	projection < struct hlist_node > hlist_node {
	}
}
rpc void  pci_disable_msi( projection dev* [in] dev ) {
	projection < struct pci_dev > dev {
		unsigned int [out] irq;
	}
}
rpc void  pci_disable_msix( projection dev* [in] dev ) {
	projection < struct pci_dev > dev {
	}
}
rpc int  pci_enable_msi_range( projection dev* [in] dev, int  minvec, int  maxvec ) {
	projection < struct pci_dev > dev {
	}
}
rpc int  pci_enable_msix_range( projection dev* [in] dev, projection entries*  entries, int  minvec, int  maxvec ) {
	projection < struct pci_dev > dev {
	}
	projection < struct msix_entry > entries {
	}
}
rpc int  pci_set_power_state( projection dev* [in] dev, int  state ) {
	projection < struct pci_dev > dev {
	}
}
	rpc_ptr unsigned int thread_fn(int irq, void *id) {
	}
	rpc_ptr unsigned int handler(int irq, void *id) {
	}
	
rpc int  request_threaded_irq( unsigned int  irq, rpc_ptr  handler handler, rpc_ptr  thread_fn thread_fn, long unsigned int  irqflags, char*  devname, void*  dev_id ) {
}
rpc void  wait_for_completion( projection x* [in] x ) {
	projection < struct completion > x {
		unsigned int [in, out] done;
	}
}
rpc long unsigned int  wait_for_completion_timeout( projection x* [in] x, long unsigned int [in] timeout ) {
	projection < struct completion > x {
		unsigned int [in, out] done;
	}
}
/*
rpc_export void  xhci_dbg_trace( projection xhci* xhci, rpc_ptr  trace trace, char* fmt ) {
	projection < struct xhci_hcd > xhci {
		projection xhci_hcd_usb_hcd* main_hcd;
	}
	projection < struct usb_hcd > xhci_hcd_main_hcd {
	}
}*/
rpc_ptr void get_quirks(projection device *dev, projection xhci_hcd *xhci_hcd) {
	projection < struct device > device {
	}

	projection < struct xhci_hcd > xhci_hcd {
	}
}

rpc_export int  xhci_gen_setup( projection hcd* [in] hcd, rpc_ptr  get_quirks get_quirks ) {
	projection < struct usb_hcd > hcd {
		int [out] speed;
	}
}
rpc_export void  xhci_init_driver( projection _global_hc_driver [alloc(callee), out] * drv, projection over* [in] over ) {
	/*projection < struct hc_driver > drv {
		long unsigned int [in, out] hcd_priv_size;
	}*/
	projection < struct xhci_driver_overrides > over {
	}
}
rpc_export int  xhci_run( projection hcd* [in] hcd ) {
	projection < struct usb_hcd > hcd {
	}
}

rpc void usb_disable_xhci_ports(projection pci_dev *xhci_pdev) {
	projection < struct pci_dev > pci_dev {
	}
}

rpc string [alloc(callee)] * dmi_get_system_info(int field) {
}

rpc bool  usb_acpi_power_manageable( projection hdev* [in] hdev, int  index ) {
	projection < struct usb_device > hdev {
		int [in] maxchild;
	}
}
rpc int  usb_acpi_set_power_state( projection hdev* [in] hdev, int  index, bool  enable ) {
	projection < struct usb_device > hdev {
		int [in] maxchild;
	}
}
rpc int  usb_disabled(  ) {
}
rpc void  usb_hc_died( projection hcd* [in] hcd ) {
		projection < struct usb_bus> usb_bus {
			projection usb_bus_root_hub* root_hub;
		}
	projection < struct usb_hcd > hcd {
		projection usb_bus self;
		long unsigned int [in] flags;
		unsigned int [in] rh_registered : 1;
	}
	projection < struct device > usb_bus_controller {
	}
	projection < struct usb_device > usb_bus_root_hub {
	}
}
rpc int  usb_hcd_check_unlink_urb( projection hcd* [unused] hcd, projection urb* [in] urb, int  status ) {
	projection < struct usb_hcd > hcd {
	}
	projection < struct urb > urb {
		projection urb_ep* ep;
	}
	projection < struct usb_host_endpoint > urb_ep {
	}
}
rpc void  usb_hcd_giveback_urb( projection hcd* [in] hcd, projection urb* [in] urb, int  status ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_driver* driver;
	}
	projection < struct hc_driver > usb_hcd_driver {
	}
	projection < struct urb > urb {
		void* [out] hcpriv;
		projection urb_dev* dev;
		unsigned int [in] transfer_flags;
		unsigned int [in] transfer_buffer_length;
		unsigned int [in] actual_length;
	}
	projection < struct usb_device > urb_dev {
		projection usb_device_parent* parent;
	}
	projection < struct usb_device > usb_device_parent {
	}
}
rpc unsigned int  usb_hcd_irq( int [unused] irq, void* [in] __hcd ) {
}
rpc int  usb_hcd_is_primary_hcd( projection hcd* [in] hcd ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;
	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
}
rpc int  usb_hcd_link_urb_to_ep( projection hcd* [in] hcd, projection urb* [in] urb ) {
	projection < struct usb_hcd > hcd {
		long unsigned int [in] flags;
	}
	projection < struct urb > urb {
		projection urb_dev* dev;
		projection urb_ep* ep;
	}
	projection < struct usb_device > urb_dev {
	}
	projection < struct usb_host_endpoint > urb_ep {
	}
}
rpc void  usb_hcd_poll_rh_status( projection hcd* [in] hcd ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_driver* driver;
		long unsigned int [in] flags;
	}
	projection < struct hc_driver > usb_hcd_driver {
	}
}
rpc void  usb_hcd_unlink_urb_from_ep( projection hcd* [unused] hcd, projection urb* [in] urb ) {
	projection < struct usb_hcd > hcd {
	}
	projection < struct urb > urb {
	}
}
rpc void  usb_wakeup_notification( projection hdev* [in] hdev, unsigned int  portnum ) {
	projection < struct usb_device > hdev {
		int [in] maxchild;
	}
}

rpc_ptr int  hc_driver_start( projection hcd* [in] hcd ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
}
rpc_ptr int  hc_driver_enable_device( projection hcd* hcd, projection udev [alloc(callee)] *udev ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > udev {
	}
}

rpc_ptr int  hc_driver_update_hub_device( projection hcd* [in] hcd, projection hdev* [in] hdev, projection tt* [in] tt, unsigned int  mem_flags ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > hdev {
		int [in] slot_id;
	}
	projection < struct usb_tt > tt {
	}
}
rpc_ptr int  hc_driver_reset_device( projection hcd* [in] hcd, projection udev* [in] udev ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > udev {
		int [in] slot_id;
	}
}
rpc_ptr int  hc_driver_update_device( projection hcd* [in] hcd, projection udev* [unused] udev ) {
	projection < struct usb_hcd > hcd {
	}
	projection < struct usb_device > udev {
	}
}
rpc_ptr int  hc_driver_set_usb2_hw_lpm( projection hcd* [in] hcd, projection udev* [unused] udev, int [unused] enable ) {
	projection < struct usb_hcd > hcd {
	}
	projection < struct usb_device > udev {
	}
}
rpc_ptr int  hc_driver_enable_usb3_lpm_timeout( projection hcd* [in] hcd, projection udev* [unused] udev, unsigned int [unused] state ) {
	projection < struct usb_hcd > hcd {
	}
	projection < struct usb_device > udev {
	}
}
rpc_ptr int  hc_driver_disable_usb3_lpm_timeout( projection hcd* [in] hcd, projection udev* [unused] udev, unsigned int [unused] state ) {
	projection < struct usb_hcd > hcd {
	}
	projection < struct usb_device > udev {
	}
}
rpc_ptr int  hc_driver_find_raw_port_number( projection hcd* [in] hcd, int  port1 ) {
	projection < struct usb_hcd > hcd {
		int [in] speed;
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
}
rpc_ptr void  hc_driver_stop( projection hcd* [in] hcd ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
}
rpc_ptr void  hc_driver_shutdown( projection hcd* [in] hcd ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
}
rpc_ptr int  hc_driver_get_frame_number( projection hcd* [in] hcd ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
}
rpc_ptr int  hc_driver_urb_enqueue( projection hcd* [in] hcd, projection urb* [in] urb, unsigned int  mem_flags ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct urb > urb {
		projection urb_dev* dev;
		projection urb_ep* ep;
	}
	projection < struct usb_device > urb_dev {
		int [in] slot_id;
	}
		projection < struct usb_endpoint_descriptor> usb_endpoint_descriptor {
			unsigned char [in] bEndpointAddress;
		}
	projection < struct usb_host_endpoint > urb_ep {
		projection usb_endpoint_descriptor desc;
	}
}
rpc_ptr int  hc_driver_urb_dequeue( projection hcd* [in] hcd, projection urb* [in] urb, int  status ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct urb > urb {
		projection urb_dev* dev;
		projection urb_ep* ep;
	}
	projection < struct usb_device > urb_dev {
		int [in] slot_id;
	}
		projection < struct usb_endpoint_descriptor> usb_endpoint_descriptor {
			unsigned char [in] bEndpointAddress;
		}
	projection < struct usb_host_endpoint > urb_ep {
		projection usb_endpoint_descriptor desc;
	}
}
rpc_ptr void  hc_driver_endpoint_reset( projection hcd* [in] hcd, projection ep* [in] ep ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
		projection < struct usb_endpoint_descriptor> usb_endpoint_descriptor {
			unsigned char [in] bEndpointAddress;
		}
	projection < struct usb_host_endpoint > ep {
		projection usb_endpoint_descriptor desc;
	}
}
rpc_ptr int  hc_driver_alloc_dev( projection hcd* [in] hcd, projection udev [alloc(callee)] *udev ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > udev {
		int [in, out] slot_id;
	}
}
rpc_ptr void  hc_driver_free_dev( projection hcd* hcd, projection udev [alloc (callee)] *udev ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > udev {
		int [in] slot_id;
	}
}
rpc_ptr int  hc_driver_alloc_streams( projection hcd* hcd, projection udev [alloc(callee)] *udev, projection eps [alloc(callee)] * [alloc(callee)] *eps, unsigned int  num_eps, unsigned int  num_streams, unsigned int  mem_flags ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > udev {
		int [in] slot_id;
	}
	projection < struct usb_host_endpoint > eps {
	}
}
rpc_ptr int  hc_driver_free_streams( projection hcd* [in] hcd, projection udev [alloc(callee)] *udev, projection eps** eps, unsigned int  num_eps, unsigned int [unused] mem_flags ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > udev {
		int [in] slot_id;
	}
	projection < struct usb_host_endpoint > eps {
	}
}
rpc_ptr int  hc_driver_add_endpoint( projection hcd*  hcd, projection udev*  udev, projection ep* [in] ep ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > udev {
		int [in] slot_id;
	}
		projection < struct usb_endpoint_descriptor> usb_endpoint_descriptor {
			unsigned char [in] bEndpointAddress;
		}
	projection < struct usb_host_endpoint > ep {
		projection usb_endpoint_descriptor desc;
	}
}
rpc_ptr int  hc_driver_drop_endpoint( projection hcd* hcd, projection udev [alloc(callee)] * udev, projection ep [alloc(callee)] * ep ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > udev {
		int [in] slot_id;
	}
		projection < struct usb_endpoint_descriptor> usb_endpoint_descriptor {
			unsigned char [in] bEndpointAddress;
		}
	projection < struct usb_host_endpoint > ep {
		projection usb_endpoint_descriptor desc;
	}
}
rpc_ptr int  hc_driver_check_bandwidth( projection hcd* [in] hcd, projection udev [alloc(callee)]  *udev ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > udev {
		int [in] slot_id;
	}
}
rpc_ptr void  hc_driver_reset_bandwidth( projection hcd*  hcd, projection udev [alloc(callee)] *udev ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > udev {
		int [in] slot_id;
	}
}
rpc_ptr int  hc_driver_address_device( projection hcd* hcd, projection udev [alloc(callee)] *udev ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > udev {
	}
}
rpc_ptr int  hc_driver_hub_status_data( projection hcd* hcd, char [alloc_stack(callee)]  *buf ) {
	projection < struct usb_hcd > hcd {
		int [in] speed;
	}
}
rpc_ptr unsigned int  hc_driver_irq( projection hcd* [in] hcd ) {
	projection < struct usb_hcd > hcd {
	}
}
rpc_ptr int  hc_driver_hub_control( projection hcd* hcd, unsigned short  typeReq, unsigned short  wValue, unsigned short  wIndex, char [in, out, alloc_stack(callee)] *buf, unsigned short  wLength ) {
	projection < struct usb_hcd > hcd {
		int [in] speed;
	}
}

projection < struct hc_driver > _global_hc_driver {
	char* [in] description;
	char* [in] product_desc;
	int [in] flags;
	long unsigned int [out] hcd_priv_size;
	rpc_ptr hc_driver_add_endpoint add_endpoint;
	rpc_ptr hc_driver_address_device address_device;
	rpc_ptr hc_driver_alloc_dev alloc_dev;
	rpc_ptr hc_driver_alloc_streams alloc_streams;
	rpc_ptr hc_driver_check_bandwidth check_bandwidth;
	rpc_ptr hc_driver_disable_usb3_lpm_timeout disable_usb3_lpm_timeout;
	rpc_ptr hc_driver_drop_endpoint drop_endpoint;
	rpc_ptr hc_driver_enable_device enable_device;
	rpc_ptr hc_driver_enable_usb3_lpm_timeout enable_usb3_lpm_timeout;
	rpc_ptr hc_driver_endpoint_reset endpoint_reset;
	rpc_ptr hc_driver_find_raw_port_number find_raw_port_number;
	rpc_ptr hc_driver_free_dev free_dev;
	rpc_ptr hc_driver_free_streams free_streams;
	rpc_ptr hc_driver_get_frame_number get_frame_number;
	rpc_ptr hc_driver_hub_control hub_control;
	rpc_ptr hc_driver_hub_status_data hub_status_data;
	rpc_ptr hc_driver_irq irq;
	rpc_ptr hc_driver_reset_bandwidth reset_bandwidth;
	rpc_ptr hc_driver_reset_device reset_device;
	rpc_ptr hc_driver_set_usb2_hw_lpm set_usb2_hw_lpm;
	rpc_ptr hc_driver_shutdown shutdown;
	rpc_ptr hc_driver_start start;
	rpc_ptr hc_driver_stop stop;
	rpc_ptr hc_driver_update_device update_device;
	rpc_ptr hc_driver_update_hub_device update_hub_device;
	rpc_ptr hc_driver_urb_dequeue urb_dequeue;
	rpc_ptr hc_driver_urb_enqueue urb_enqueue;
}


/*
	global projection < struct array< kmem_cache, 0> > array< kmem_cache, 0> {
	}
	global projection < struct lock_class_key > lock_class_key {
	}
	global projection < struct dma_map_ops > dma_map_ops {
	}
	global projection < struct lock_class_key > lock_class_key {
	}
	global [get][set] bool xhci_remove_stream_mapping.__warned
	global projection < struct lock_class_key > lock_class_key {
	}
	global projection < struct array< mem_section, 1024> > array< mem_section, 1024> {
	}
	global [get]  jiffies
	global [get][set] bool xhci_update_stream_segment_mapping.__warned
	global projection < struct cpumask > cpumask {
	}
	global  int __preempt_count
	global projection < struct ratelimit_state > ratelimit_state {
	}
	global projection < struct ratelimit_state > ratelimit_state {
	}
	*/
}
