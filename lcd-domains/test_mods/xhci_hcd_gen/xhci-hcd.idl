module kernel {
	rpc void  add_timer( projection timer [bind(callee)] * timer ) {
		projection < struct timer_list > timer {
			long unsigned int [in, out] expires;
		}
	}

	rpc void  complete( projection x [alloc_once(callee)] * x ) {
		projection < struct completion > x {
			unsigned int [in, out] done;
		}
	}
	rpc int  del_timer( projection timer [bind(callee)] * timer ) {

		projection < struct timer_list > timer {
		}
	}

	rpc void  free_irq( u32  irq, void [bind(callee)] * dev_id ) {
	}

	rpc int del_timer_sync( projection timer [bind(callee)] *timer ) {
		projection < struct timer_list > timer {
		}
	}

	rpc_ptr void timer_func(unsigned long data) {
	}

	rpc void  lvd_setup_timer( projection timer [alloc(callee), bind(callee)] * [in, out] timer,
			rpc_ptr timer_func func, unsigned long data ) {
		projection < struct timer_list > timer {
			unsigned long [out] data;
		}
	}

	rpc int mod_timer( projection timer [bind(callee)] *timer, unsigned long expires ) {
		projection < struct timer_list > timer {
			long unsigned int [out] expires;
		}
	}

	rpc void  pci_disable_msi( projection dev* dev ) {
		projection < struct pci_dev > dev {
			unsigned int [out] irq;
		}
	}

	rpc void  pci_disable_msix( projection dev * dev ) {
		projection < struct pci_dev > dev {
		}
	}
	rpc int pci_enable_msix_range( projection dev * dev,
			array<projection entries, {{ctx->maxvec}}> [alloc(callee), bind(callee)] * [in, out] entries,
			int minvec, int maxvec ) {
		projection < struct pci_dev > dev {
			unsigned int [out] msi_enabled : 1;
			unsigned int [out] msix_enabled: 1;
		}
		projection < struct msix_entry > entries {
			u32 [out] vector;
			u16 entry;
		}
	}
	rpc int pci_enable_msi_range( projection dev *dev, int minvec, int maxvec ) {
		projection < struct pci_dev > dev {
			unsigned int [out] msi_enabled : 1;
			unsigned int [out] msix_enabled: 1;
			unsigned int [out] irq;
		}
	}

	rpc int  pci_set_power_state( projection dev* [in] dev, int  state ) {
		projection < struct pci_dev > dev {
		}
	}
	rpc_ptr unsigned int thread_fn(int irq, void [unused] *id) {
	}
	rpc_ptr unsigned int irq_handler(int irq, void [unused] *id) {
	}
	
	rpc int request_threaded_irq( unsigned int irq,
			rpc_ptr irq_handler handler,
			rpc_ptr thread_fn [unused] thread_fn,
			long unsigned int irqflags,
			string [alloc(callee)] * devname,
			void [alloc<{{sizeof(void*)}}>(callee)] * dev_id ) {
	}

	rpc void  wait_for_completion( projection x [alloc_once(callee)] * x ) {
		projection < struct completion > x {
			unsigned int [in, out] done;
		}
	}
	rpc long unsigned int  wait_for_completion_timeout( projection x [alloc_once(callee)] * x,
				long unsigned int [in] timeout ) {
		projection < struct completion > x {
			unsigned int [in, out] done;
		}
	}
/*
rpc_export void  xhci_dbg_trace( projection xhci* xhci, rpc_ptr  trace trace, char* fmt ) {
	projection < struct xhci_hcd > xhci {
		projection xhci_hcd_usb_hcd* main_hcd;
	}
	projection < struct usb_hcd > xhci_hcd_main_hcd {
	}
}*/
rpc_ptr void get_quirks(projection device *dev, projection xhci_hcd *xhci_hcd) {
//rpc void global_get_quirks(projection device [bind_memberof<struct usb_hcd, self.controller>(callee)] *dev,
//		projection xhci_hcd [bind_memberof<struct usb_hcd, hcd_priv>(callee)] *xhci_hcd) {
	projection < struct device > device {
	}

	projection < struct xhci_hcd > xhci_hcd {

	}
}

/*
rpc_export int  xhci_gen_setup( projection hcd [alloc<{{sizeof(hcd) + sizeof(struct xhci_hcd)}}>(callee)] *hcd,
					rpc_ptr  get_quirks get_quirks ) {
	projection < struct usb_hcd > hcd {
		int [out] speed;
		// regs;
		//casted<unsigned long *, projection xhci_hcd*> [within<{{hcd}}, {{sizeof(struct xhci_hcd)}}>] hcd_priv;
	}
	projection <struct xhci_hcd> xhci_hcd {
		char sbrn;
	}
}
*/
	rpc void [ioremap(caller)]  *ioremap_nocache( u64  phys_addr, unsigned long size ) {

	}

	rpc_export int  xhci_gen_setup_with_xhci( projection hcd [alloc<{{sizeof(*hcd) + sizeof(struct xhci_hcd)}}>(callee)] *hcd,
						projection xhci_hcd [within<{{hcd}}, {{sizeof(struct xhci_hcd) + sizeof(struct usb_hcd)}}>] *xhci,
						rpc_ptr get_quirks get_quirks) {
	       projection < struct usb_bus> usb_bus {
			projection pci_device [alloc(callee)] *pci_dev;
			//projection usb_bus_controller [alloc(callee)] * controller;
			projection usb_bus_controller [within<{{pci_dev}}, {{sizeof(struct device)}}>] * controller;
			unsigned int [in, out] is_b_host : 1;
			projection usb_bus_root_hub [alloc(callee)] * root_hub;
		}
		projection < struct usb_hcd > hcd {
			projection usb_bus self;
			int [out] speed;
			projection hc_driver [bind(callee)] * driver;
			unsigned int [out] rh_registered : 1;
			unsigned long rsrc_start;
			unsigned long rsrc_len;
			projection usb_hcd_primary_hcd [alloc_once(callee)] * primary_hcd;
			projection usb_hcd_shared_hcd [alloc_once(callee)] * shared_hcd;
		}

		projection < struct usb_hcd > usb_hcd_shared_hcd {

		}

		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}

		projection <struct pci_dev> pci_device {
			unsigned short vendor;
			unsigned short device;
			unsigned int devfn;
			projection pci_bus [alloc(callee)] *bus;
		}

		projection <struct pci_bus> pci_bus {
			unsigned char number;
		}

		projection < struct hc_driver > hc_driver {

		}

		projection < struct xhci_hcd> xhci_hcd {
			char sbrn;
			unsigned short hci_version;
			unsigned int quirks;
			unsigned int xhc_state;
		}

		projection < struct device > usb_bus_controller {
				array<u64, 1> [alloc(callee)] *dma_mask;
		}

		projection < struct usb_device > usb_bus_root_hub {
			unsigned int [out] speed;
		}
	}

/*
rpc_export int  xhci_gen_setup( projection hcd [alloc<{{sizeof(hcd) + sizeof(struct xhci_hcd)}}>(callee)] *hcd,
					rpc_ptr  get_quirks get_quirks ) {
       projection < struct usb_bus> usb_bus {
		projection usb_bus_controller [alloc(callee)] * controller;
		unsigned int [in, out] is_b_host : 1;
		projection usb_bus_root_hub [alloc(callee)] * root_hub;
	}
        projection < struct usb_hcd > hcd {
                projection usb_bus self;
                int [out] speed;
                projection hc_driver* driver;
                unsigned int [out] rh_registered : 1;
        }

	projection < struct hc_driver > hc_driver {

	}

        projection < struct device > usb_bus_controller {
        }
        projection < struct usb_device > usb_bus_root_hub {
                unsigned int [out] speed;
        }
}
*/
	rpc_export void  xhci_init_driver( projection _global_hc_driver [alloc(callee), out] * drv,
				const projection over [alloc(callee)] * over ) {
		/*projection < struct hc_driver > drv {
			long unsigned int [in, out] hcd_priv_size;
		}*/
		projection < struct xhci_driver_overrides > over {
			unsigned int extra_priv_size;
			//rpc_ptr hc_driver_reset reset; 
		}

		projection < struct hc_driver > _global_hc_driver {
			string [alloc(caller), out] *description;
			string [alloc(caller), out] *product_desc;
			int flags;
			long unsigned int hcd_priv_size;
			//rpc_ptr hc_driver_reset reset;
			rpc_ptr hc_driver_add_endpoint add_endpoint;
			rpc_ptr hc_driver_address_device address_device;
			rpc_ptr hc_driver_alloc_dev alloc_dev;
			rpc_ptr hc_driver_alloc_streams alloc_streams;
			rpc_ptr hc_driver_check_bandwidth check_bandwidth;
			rpc_ptr hc_driver_disable_usb3_lpm_timeout disable_usb3_lpm_timeout;
			rpc_ptr hc_driver_drop_endpoint drop_endpoint;
			rpc_ptr hc_driver_enable_device enable_device;
			rpc_ptr hc_driver_enable_usb3_lpm_timeout enable_usb3_lpm_timeout;
			rpc_ptr hc_driver_endpoint_reset endpoint_reset;
			rpc_ptr hc_driver_find_raw_port_number find_raw_port_number;
			rpc_ptr hc_driver_free_dev free_dev;
			rpc_ptr hc_driver_free_streams free_streams;
			rpc_ptr hc_driver_get_frame_number get_frame_number;
			rpc_ptr hc_driver_hub_control hub_control;
			rpc_ptr hc_driver_hub_status_data hub_status_data;
			rpc_ptr hc_driver_irq irq;
			rpc_ptr hc_driver_reset_bandwidth reset_bandwidth;
			rpc_ptr hc_driver_reset_device reset_device;
			rpc_ptr hc_driver_set_usb2_hw_lpm set_usb2_hw_lpm;
			rpc_ptr hc_driver_shutdown shutdown;
			rpc_ptr hc_driver_start start;
			rpc_ptr hc_driver_stop stop;
			rpc_ptr hc_driver_update_device update_device;
			rpc_ptr hc_driver_update_hub_device update_hub_device;
			rpc_ptr hc_driver_urb_dequeue urb_dequeue;
			rpc_ptr hc_driver_urb_enqueue urb_enqueue;
		}
	}

	// xhci_run is called multiple times with different args
	rpc_export int  xhci_run( projection hcd [alloc_once(callee)] * hcd ) {
		projection < struct usb_hcd > hcd {
		}
	}

	rpc void usb_disable_xhci_ports(projection pci_dev *xhci_pdev) {
		projection < struct pci_dev > pci_dev {
		}
	}

	rpc string [alloc(caller)] * dmi_get_system_info(int field) {
	}

	rpc bool  usb_acpi_power_manageable( projection hdev [bind(callee)] *hdev, int  index ) {
		projection < struct usb_device > hdev {
			int [in] maxchild;
		}
	}

	rpc int  usb_acpi_set_power_state( projection hdev [bind(callee)] * hdev, int  index, bool  enable ) {
		projection < struct usb_device > hdev {
			int [in] maxchild;
		}
	}

	rpc int  usb_disabled(  ) {
	}

rpc void  usb_hc_died( projection hcd* [in] hcd ) {
		projection < struct usb_bus> usb_bus {
			projection usb_bus_root_hub* root_hub;
		}
	projection < struct usb_hcd > hcd {
		projection usb_bus self;
		long unsigned int [in] flags;
		unsigned int [in] rh_registered : 1;
	}
	projection < struct device > usb_bus_controller {
	}
	projection < struct usb_device > usb_bus_root_hub {
	}
}
rpc int  usb_hcd_check_unlink_urb( projection hcd* [unused] hcd, projection urb* [in] urb, int  status ) {
	projection < struct usb_hcd > hcd {
	}
	projection < struct urb > urb {
		projection urb_ep* ep;
	}
	projection < struct usb_host_endpoint > urb_ep {
	}
}
rpc void  usb_hcd_giveback_urb( projection hcd* [in] hcd, projection urb* [in] urb, int  status ) {
	projection < struct usb_hcd > hcd {
		//projection usb_hcd_driver* driver;
	}
	/*projection < struct hc_driver > usb_hcd_driver {
	}*/
	projection < struct urb > urb {
		void* [out] hcpriv;
		projection urb_dev* dev;
		unsigned int [in] transfer_flags;
		unsigned int [in] transfer_buffer_length;
		unsigned int [in] actual_length;
	}
	projection < struct usb_device > urb_dev {
		projection usb_device_parent* parent;
	}
	projection < struct usb_device > usb_device_parent {
	}
}
rpc unsigned int  usb_hcd_irq( int [unused] irq, void* [in] __hcd ) {
}
	rpc int  usb_hcd_is_primary_hcd( projection hcd* hcd ) {
		projection < struct usb_hcd > hcd {
			//projection usb_hcd_primary_hcd* primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
	}
rpc int  usb_hcd_link_urb_to_ep( projection hcd* [in] hcd, projection urb* [in] urb ) {
	projection < struct usb_hcd > hcd {
		long unsigned int [in] flags;
	}
	projection < struct urb > urb {
		projection urb_dev* dev;
		projection urb_ep* ep;
	}
	projection < struct usb_device > urb_dev {
	}
	projection < struct usb_host_endpoint > urb_ep {
	}
}
rpc void  usb_hcd_poll_rh_status( projection hcd* [in] hcd ) {
	projection < struct usb_hcd > hcd {
		//projection usb_hcd_driver* driver;
		long unsigned int [in] flags;
	}
	/*projection < struct hc_driver > usb_hcd_driver {
	}*/
}
rpc void  usb_hcd_unlink_urb_from_ep( projection hcd* [unused] hcd, projection urb* [in] urb ) {
	projection < struct usb_hcd > hcd {
	}
	projection < struct urb > urb {
	}
}
rpc void  usb_wakeup_notification( projection hdev* [in] hdev, unsigned int  portnum ) {
	projection < struct usb_device > hdev {
		int [in] maxchild;
	}
}

	rpc_ptr int  hc_driver_enable_device( projection hcd [bind(callee)] * hcd,
			projection udev [alloc_once(callee)] *udev ) {
		projection < struct usb_hcd > hcd {
			projection usb_hcd_primary_hcd [alloc_once(callee)] * primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
		projection < struct usb_device > udev {
			int [in] slot_id;
		}
	}

	rpc_ptr int  hc_driver_update_hub_device( projection hcd [bind(callee)] * hcd,
		projection hdev [alloc_once(callee)] * hdev,
		projection tt [alloc_once(callee)] * tt, unsigned int  mem_flags ) {
		projection < struct usb_hcd > hcd {
			projection usb_hcd_primary_hcd [alloc_once(callee)] * primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
		projection < struct usb_device > hdev {
			int [in] slot_id;
			projection usb_device [alloc_once(callee)] *parent;	
		}
		projection < struct usb_device > usb_device {
		}
		projection < struct usb_tt > tt {
		}
	}

	rpc_ptr int  hc_driver_reset_device( projection hcd [bind(callee)] * hcd,
			projection udev [alloc_once(callee)] * udev ) {
		projection < struct usb_hcd > hcd {
			projection usb_hcd_primary_hcd* primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
		projection < struct usb_device > udev {
			int [in] slot_id;
			projection usb_device [alloc_once(callee)] *parent;	
		}
		projection < struct usb_device > usb_device {
		}
	}
rpc_ptr int  hc_driver_update_device( projection hcd* [in] hcd, projection udev* [unused] udev ) {
	projection < struct usb_hcd > hcd {
	}
	projection < struct usb_device > udev {
	}
}
rpc_ptr int  hc_driver_set_usb2_hw_lpm( projection hcd* [in] hcd, projection udev* [unused] udev, int [unused] enable ) {
	projection < struct usb_hcd > hcd {
	}
	projection < struct usb_device > udev {
	}
}
rpc_ptr int  hc_driver_enable_usb3_lpm_timeout( projection hcd* [in] hcd, projection udev* [unused] udev, unsigned int [unused] state ) {
	projection < struct usb_hcd > hcd {
	}
	projection < struct usb_device > udev {
	}
}
rpc_ptr int  hc_driver_disable_usb3_lpm_timeout( projection hcd* [in] hcd, projection udev* [unused] udev, unsigned int [unused] state ) {
	projection < struct usb_hcd > hcd {
	}
	projection < struct usb_device > udev {
	}
}
	rpc_ptr int  hc_driver_find_raw_port_number( projection hcd [bind(callee)] *hcd,
				int  port1 ) {
		projection < struct usb_hcd > hcd {
			int [in] speed;
			projection usb_hcd_primary_hcd* primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
	}

rpc_ptr void  hc_driver_stop( projection hcd* [in] hcd ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
}
rpc_ptr void  hc_driver_shutdown( projection hcd* [in] hcd ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
}
rpc_ptr int  hc_driver_get_frame_number( projection hcd* [in] hcd ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
}
	rpc_ptr int  hc_driver_urb_enqueue( projection hcd [bind(callee)] *hcd,
		projection urb [alloc_once(callee)] * urb, unsigned int  mem_flags ) {
		projection < struct usb_hcd > hcd {
			projection usb_hcd_primary_hcd* primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
		projection < struct urb > urb {
			projection urb_dev [alloc_once(callee)] * dev;
			projection urb_ep [alloc_once(callee)] * ep;
		}
		projection < struct usb_device > urb_dev {
			int [in] slot_id;
		}
		projection < struct usb_endpoint_descriptor> usb_endpoint_descriptor {
			unsigned char [in] bEndpointAddress;
		}
		projection < struct usb_host_endpoint > urb_ep {
			projection usb_endpoint_descriptor desc;
		}
	}

rpc_ptr int  hc_driver_urb_dequeue( projection hcd* [in] hcd, projection urb* [in] urb, int  status ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct urb > urb {
		projection urb_dev* dev;
		projection urb_ep* ep;
	}
	projection < struct usb_device > urb_dev {
		int [in] slot_id;
	}
		projection < struct usb_endpoint_descriptor> usb_endpoint_descriptor {
			unsigned char [in] bEndpointAddress;
		}
	projection < struct usb_host_endpoint > urb_ep {
		projection usb_endpoint_descriptor desc;
	}
}
	rpc_ptr void  hc_driver_endpoint_reset( projection hcd [bind(callee)] * hcd,
			projection ep [alloc_once(callee)] * ep ) {
		projection < struct usb_hcd > hcd {
			projection usb_hcd_primary_hcd [alloc_once(callee)] * primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
		projection < struct usb_endpoint_descriptor> usb_endpoint_descriptor {
			unsigned char [in] bEndpointAddress;
		}
		projection < struct usb_host_endpoint > ep {
			projection usb_endpoint_descriptor desc;
		}
	}

	rpc_ptr int  hc_driver_alloc_dev( projection hcd [bind(callee)] * hcd,
				projection udev [alloc_once(callee)] *udev ) {
		projection < struct usb_hcd > hcd {
			projection usb_hcd_primary_hcd [alloc_once(callee)] * primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
		projection < struct usb_device > udev {
			int [in, out] slot_id;
		}
	}

	rpc_ptr void  hc_driver_free_dev( projection hcd [bind(callee)] * hcd,
				projection udev [alloc_once(callee)] *udev ) {
		projection < struct usb_hcd > hcd {
			projection usb_hcd_primary_hcd [alloc_once(callee)] * primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
		projection < struct usb_device > udev {
			int [in] slot_id;
		}
	}

rpc_ptr int  hc_driver_alloc_streams( projection hcd* hcd, projection udev [alloc(callee)] *udev, projection eps [alloc(callee)] * [alloc(callee)] *eps, unsigned int  num_eps, unsigned int  num_streams, unsigned int  mem_flags ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > udev {
		int [in] slot_id;
	}
	projection < struct usb_host_endpoint > eps {
	}
}
rpc_ptr int  hc_driver_free_streams( projection hcd* [in] hcd, projection udev [alloc(callee)] *udev, projection eps** eps, unsigned int  num_eps, unsigned int [unused] mem_flags ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > udev {
		int [in] slot_id;
	}
	projection < struct usb_host_endpoint > eps {
	}
}
	rpc_ptr int  hc_driver_add_endpoint( projection hcd [bind(callee)] *  hcd,
			projection udev [alloc_once(callee)] *  udev,
			projection ep [alloc_once(callee)] * ep ) {
		projection < struct usb_hcd > hcd {
			projection usb_hcd_primary_hcd [alloc_once(callee)] * primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
		projection < struct usb_device > udev {
			int slot_id;
			projection usb_device [alloc(callee)] *parent;	
		}
		projection < struct usb_device > usb_device {
		}
		projection < struct usb_endpoint_descriptor> usb_endpoint_descriptor {
			unsigned char [in] bEndpointAddress;
		}
		projection < struct usb_host_endpoint > ep {
			projection usb_endpoint_descriptor desc;
		}
	}

	rpc_ptr int  hc_driver_drop_endpoint( projection hcd [bind(callee)] * hcd,
			projection udev [alloc_once(callee)] * udev,
			projection ep [alloc_once(callee)] * ep ) {
		projection < struct usb_hcd > hcd {
			projection usb_hcd_primary_hcd [alloc_once(callee)] * primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
		projection < struct usb_device > udev {
			int [in] slot_id;
		}
		projection < struct usb_endpoint_descriptor> usb_endpoint_descriptor {
			unsigned char [in] bEndpointAddress;
		}
		projection < struct usb_host_endpoint > ep {
			projection usb_endpoint_descriptor desc;
		}
	}

	rpc_ptr int hc_driver_check_bandwidth( projection hcd [bind(callee)] * hcd,
			projection udev [alloc_once(callee)]  *udev ) {
		projection < struct usb_hcd > hcd {
			projection usb_hcd_primary_hcd [alloc_once(callee)] * primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
		projection < struct usb_device > udev {
			projection usb_device [alloc(callee)] *parent;	
			int [in] slot_id;
		}
		projection < struct usb_device > usb_device {
		}
	}
rpc_ptr void  hc_driver_reset_bandwidth( projection hcd*  hcd, projection udev [alloc(callee)] *udev ) {
	projection < struct usb_hcd > hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
		projection usb_hcd_primary_hcd* primary_hcd;

	}
	projection < struct usb_hcd > usb_hcd_primary_hcd {
	}
	projection < struct usb_device > udev {
		int [in] slot_id;
	}
}
	rpc_ptr int  hc_driver_address_device( projection hcd [bind(callee)] * hcd,
			projection udev [alloc_once(callee)] *udev ) {
		projection < struct usb_hcd > hcd {
			projection usb_hcd_primary_hcd [alloc_once(callee)] * primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
		projection < struct usb_device > udev {
		}
	}
	rpc_ptr int  hc_driver_hub_status_data( projection hcd [bind(callee)] * hcd,
			array<char, {{32}}> [alloc(callee), bind(callee)] * [in, out] buf) {
		projection < struct usb_hcd > hcd {
			int [in] speed;
		}
	}
	rpc_ptr unsigned int  hc_driver_irq( projection hcd [bind(callee)] *hcd ) {
		projection < struct usb_hcd > hcd {
			projection usb_hcd_primary_hcd [alloc_once(callee)] * primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
	}

	rpc_ptr int  hc_driver_hub_control( projection hcd [bind(callee)] * hcd, unsigned short  typeReq,
		unsigned short  wValue, unsigned short  wIndex,
		array<char, {{wLength}}> [alloc(callee), bind(callee)] * [in, out] buf,
 		unsigned short  wLength ) {
		projection < struct usb_hcd > hcd {
			int [in] speed;
			projection usb_hcd_primary_hcd [alloc_once(callee)] * primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
	}

	rpc_ptr int hc_driver_reset(projection usb_hcd [bind(callee)] *hcd) {
		projection <struct usb_hcd> usb_hcd {
			projection usb_hcd_primary_hcd [alloc_once(callee)] * primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
	}

	rpc_ptr int hc_driver_start(projection usb_hcd [bind(callee)] *hcd) {
		projection <struct usb_hcd> usb_hcd {
			unsigned int [out] uses_new_polling: 1;
			projection usb_hcd_primary_hcd [alloc_once(callee)] * primary_hcd;
		}
		projection < struct usb_hcd > usb_hcd_primary_hcd {
		}
	}

/*
	global projection < struct array< kmem_cache, 0> > array< kmem_cache, 0> {
	}
	global projection < struct lock_class_key > lock_class_key {
	}
	global projection < struct dma_map_ops > dma_map_ops {
	}
	global projection < struct lock_class_key > lock_class_key {
	}
	global [get][set] bool xhci_remove_stream_mapping.__warned
	global projection < struct lock_class_key > lock_class_key {
	}
	global projection < struct array< mem_section, 1024> > array< mem_section, 1024> {
	}
	global [get]  jiffies
	global [get][set] bool xhci_update_stream_segment_mapping.__warned
	global projection < struct cpumask > cpumask {
	}
	global  int __preempt_count
	global projection < struct ratelimit_state > ratelimit_state {
	}
	global projection < struct ratelimit_state > ratelimit_state {
	}
	*/
}
