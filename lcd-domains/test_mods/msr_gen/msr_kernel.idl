module kernel {

rpc_ptr long read( projection file [alloc_once(callee)] * file, array<char, {{count}}> [alloc(callee),in, out] *buf, unsigned long count, long long [alloc_stack(callee)] * ppos ) {
	projection <struct inode> inode {
		unsigned int i_rdev;
	}
	projection < struct file > file {
		projection inode [alloc_once(callee)] *f_inode;
	}
}

rpc_ptr long write( projection file [alloc(callee)] * file, const array<char, {{count}}> [alloc(callee)] *buf, unsigned long count, long long [alloc(callee)] * ppos ) {
    projection <struct inode> inode {
        unsigned int i_rdev;
    }
	projection < struct file > file {
        projection inode [alloc(callee)] *f_inode;
	}
}
rpc_ptr long compat_ioctl( projection file [alloc(callee)] * file, unsigned int ioc, unsigned long arg ) {
    projection <struct inode> inode {
        unsigned int i_rdev;
    }
	projection < struct file > file {
        projection inode [alloc(callee)] *f_inode;
        unsigned int f_mode;
	}
}
rpc_ptr int open( projection inode [alloc(callee)] * inode, projection file [alloc(callee)]* file ) {
	projection < struct inode > inode {
        unsigned int i_rdev;
	}
	projection < struct file > file {
		projection inode [alloc(callee)] *f_inode;
	}
}

rpc int __register_chrdev( unsigned int major, unsigned int baseminor, unsigned int count, string [alloc(callee)] *name, const projection fops [alloc(callee)] * fops ) {
	projection < struct file_operations > fops {
		projection owner [alloc(callee)]* owner;
		rpc_ptr read read;
		rpc_ptr write write;
		//rpc_ptr unlocked_ioctl unlocked_ioctl;
		rpc_ptr compat_ioctl compat_ioctl;
		rpc_ptr open open;
	}
	projection < struct module > owner {
	}
}
rpc void __unregister_chrdev( unsigned int major, unsigned int baseminor, unsigned int count, string [alloc(callee)] * name ) {
}

// Vararg function? 
// void warn_slowpath_fmt(const char *file, const int line, unsigned taint, const char *fmt, ...);
//rpc void warn_slowpath_fmt(const char* file, const int line, const char* fmt ) {
//}
rpc void cpu_maps_update_begin(  ) {
}
rpc void cpu_maps_update_done(  ) {
}
//rpc unsigned char* kasprintf( unsigned long gfp, unsigned char* fmt ) {
//}
rpc int wrmsr_safe_regs_on_cpu( unsigned int cpu, array<unsigned int, 8> [alloc(callee), in, out] *regs ) {
}
rpc int rdmsr_safe_regs_on_cpu( unsigned int cpu, array<unsigned int, 8> [alloc(callee), in, out] * regs ) {
}
rpc int wrmsr_safe_on_cpu( unsigned int cpu, unsigned int msr_no, unsigned int l, unsigned int h ) {
}
rpc int rdmsr_safe_on_cpu( unsigned int cpu, unsigned int msr_no, unsigned int [alloc(callee), out] * l, unsigned int [alloc(callee), out] * h ) {
}
rpc bool capable(int cap ) {
}
rpc long long no_seek_end_llseek( projection file * file, long long offset, int whence ) {
	projection < struct file > file {
	}
}
rpc projection ret_class [alloc(caller)] * __class_create( projection owner [bind(callee)] * owner, string [alloc(callee)] *name) {//, projection key * key ) {
	projection < struct class > ret_class {
	}
	projection < struct module > owner {
	}
	/*projection < struct lock_class_key > key {
	}*/
}

rpc_ptr array<char, null> [alloc(caller)] * devnode( projection device [alloc(callee)] *dev, unsigned short * [unused] mode ) {
	projection <struct device> device {
		unsigned int devt;
	}
}

rpc projection ret_device [bind(caller)] * __device_create( projection class * class, projection parent [alloc(callee)]* parent, u32 devt, void* [unused] drvdata, string [alloc(callee)] * fmt, u32 cpu ) {
	projection < struct device > ret_device {
	}
	projection < struct class > class {
		rpc_ptr devnode  devnode;
	}
	projection < struct device > parent {
	}
}

rpc void device_destroy( projection class * class, u32 devt ) {
	projection < struct class > class {
	}
}
rpc void class_destroy( projection cls * cls ) {
	projection < struct class > cls {
	}
}
	rpc unsigned long get_jiffies() {
	}


}
