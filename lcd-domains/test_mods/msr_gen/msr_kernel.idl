module kernel {
rpc_ptr long read( projection file * file, char* buf, unsigned long count, long long* ppos ) {
    projection <struct inode> inode {
        unsigned int i_rdev;
    }
	projection < struct file > file {
        projection inode *f_inode;
	}
}
rpc_ptr long write( projection file * file, const char* buf, unsigned long count, long long* ppos ) {
    projection <struct inode> inode {
        unsigned int i_rdev;
    }
	projection < struct file > file {
        projection inode *f_inode;
	}
}
rpc_ptr long compat_ioctl( projection file * file, unsigned int ioc, unsigned long arg ) {
    projection <struct inode> inode {
        unsigned int i_rdev;
    }
	projection < struct file > file {
        projection inode *f_inode;
        unsigned int f_mode;
	}
}
rpc_ptr int open( projection inode * inode, projection file * file ) {
	projection < struct inode > inode {
        unsigned int i_rdev;
	}
	projection < struct file > file {
	}
}
rpc int __register_chrdev( unsigned int major, unsigned int baseminor, unsigned int count, const char* name, const projection fops * fops ) {
	projection < struct file_operations > fops {
		projection owner * owner;
		rpc_ptr read read;
		rpc_ptr write write;
		//rpc_ptr unlocked_ioctl unlocked_ioctl;
		rpc_ptr compat_ioctl compat_ioctl;
		rpc_ptr open open;
	}
	projection < struct module > owner {
	}
}
rpc void __unregister_chrdev( unsigned int major, unsigned int baseminor, unsigned int count, const char* name ) {
}

// Vararg function? 
// void warn_slowpath_fmt(const char *file, const int line, unsigned taint, const char *fmt, ...);
//rpc void warn_slowpath_fmt(const char* file, const int line, const char* fmt ) {
//}
rpc void cpu_maps_update_begin(  ) {
}
rpc void cpu_maps_update_done(  ) {
}
//rpc unsigned char* kasprintf( unsigned long gfp, unsigned char* fmt ) {
//}
rpc int wrmsr_safe_regs_on_cpu( unsigned int cpu, array<unsigned int, 8> *regs ) {
}
rpc int rdmsr_safe_regs_on_cpu( unsigned int cpu, array<unsigned int, 8> *regs ) {
}
rpc int wrmsr_safe_on_cpu( unsigned int cpu, unsigned int msr_no, unsigned int l, unsigned int h ) {
}
rpc int rdmsr_safe_on_cpu( unsigned int cpu, unsigned int msr_no, unsigned int* l, unsigned int* h ) {
}
rpc bool capable(int cap ) {
}
rpc long long no_seek_end_llseek( projection file * file, long long offset, int whence ) {
	projection < struct file > file {
	}
}
}
