module kernel {
	//TODO: struct raw_can_sock(raw_sock inside raw.c) is not visible outside. Make a copy to do sizeof()
	rpc_ptr int  proto_init( projection sk [alloc<{{sizeof(struct raw_can_sock)}}>(callee)] *  sk ) {
		projection < struct sock > sk {
		}
	}

	rpc projection ret_net_device [alloc(caller)] *  dev_get_by_index( projection net* [unused] net, int  ifindex ) {
		projection < struct net_device > ret_net_device {
			unsigned short type;
		}
		projection < struct net > net {
		}
	}
	rpc_ptr int  proto_ops_bind( projection sock [alloc_once(callee)] *  sock, casted<projection uaddr*, projection sockaddr_can [alloc<{{sizeof(struct sockaddr_can)}}>(callee)] *>  uaddr, int  len ) {
		projection < struct socket > sock {
			projection socket_sk [alloc_once(callee)] * sk;
		}
		projection < struct sock > socket_sk {
			int [in, out] sk_err;
		}
		projection < struct sockaddr > uaddr {
		}
		projection < struct sockaddr_can > sockaddr_can {
			int can_ifindex;
		}
	}
	rpc_ptr int  proto_ops_release( projection sock [alloc_once(callee)] *  sock ) {
		projection < struct socket > sock {
			projection socket_sk [alloc_once(callee)] * sk;
		}
		projection < struct sock > socket_sk {
		}
	}
	rpc_ptr int  proto_ops_getname( projection sock [alloc_once(callee)] *  sock, casted<projection uaddr*, projection sockaddr_can [alloc<{{sizeof(struct sockaddr_can)}}>(callee)] *>  uaddr, int [alloc(callee), out] *len, int  peer ) {
		projection < struct socket > sock {
			projection socket_sk [alloc_once(callee)] * sk;
		}
		projection < struct sock > socket_sk {
		}
		projection < struct sockaddr > uaddr {
		}
		projection < struct sockaddr_can > sockaddr_can {
			unsigned short can_family;
			int can_ifindex;
		}
	}
	rpc_ptr int  proto_ops_setsockopt( projection sock [alloc_once(callee)] *  sock, int  level, int  optname, array<char, {{optlen}}> [alloc(callee)] * optval, unsigned int  optlen ) {
		projection < struct socket > sock {
			projection socket_sk [alloc_once(callee)] * sk;
		}
		projection < struct sock > socket_sk {
		}
	}
	rpc_ptr int  proto_ops_getsockopt( projection sock [alloc_once(callee)] *  sock, int  level, int  optname, array<char, {{*optlen}}> [alloc(callee), out] *optval, int [alloc(callee), out] *  optlen ) {
		projection < struct socket > sock {
			projection socket_sk [alloc_once(callee)] * sk;
		}
		projection < struct sock > socket_sk {
		}
	}
	rpc_ptr int  proto_ops_sendmsg( projection sock [alloc_once(callee)] *  sock, projection msg [alloc_once(callee)] *  msg, long unsigned int  size ) {
		projection < struct socket > sock {
			projection socket_sk [alloc_once(callee)] * sk;
		}
		projection < struct sock > socket_sk {
		}
		projection < struct msghdr > msg {
			casted<void *, array<char, {{ptr->msg_namelen}}> [alloc(callee), bind(callee)] *> msg_name;
			int  msg_namelen;
			//projection msghdr_msg_iocb* msg_iocb;
		}
		/*projection < struct kiocb > msghdr_msg_iocb {
		}*/
	}
	rpc_ptr int  proto_ops_recvmsg( projection sock [alloc_once(callee)] *  sock, projection msg [alloc_once(callee)] * [out] msg, long unsigned int  size, int  flags ) {
		projection < struct socket > sock {
			projection socket_sk [alloc_once(callee)] * sk;
		}
		projection < struct sock > socket_sk {
		}
		projection < struct msghdr > msg {
			int [out] msg_namelen;
			casted<void *, array<char, {{ptr->msg_namelen}}> [alloc(callee), bind(callee)] *> [in, out] msg_name;
			unsigned int [in, out] msg_flags;
		}
	}
	rpc_ptr int  proto_ops_mmap( projection file* [unused] file, projection sock*   [unused] sock, projection vma* [unused] vma ) {
		projection < struct file > file {
		}
		projection < struct socket > sock {
		}
		projection < struct vm_area_struct > vma {
		}
	}
	rpc_ptr int  proto_ops_shutdown( projection sock*   [unused] sock, int [unused] how ) {
		projection < struct socket > sock {
		}
	}
	rpc_ptr int  proto_ops_listen( projection sock*  [unused]  sock, int [unused] backlog ) {
		projection < struct socket > sock {
		}
	}
	rpc_ptr int  proto_ops_accept( projection sock*  [unused]  sock, projection newsock* [unused] newsock, int [unused] flags ) {
		projection < struct socket > sock {
		}
		projection < struct socket > newsock {
		}
	}
	rpc_ptr int  proto_ops_socketpair( projection sock1* [unused] sock1, projection sock2* [unused] sock2 ) {
		projection < struct socket > sock1 {
		}
		projection < struct socket > sock2 {
		}
	}
	rpc_ptr int  proto_ops_connect( projection sock * [unused] sock, projection saddr* [unused] saddr, int [unused] len, int [unused] flags ) {
		projection < struct socket > sock {
		}
		projection < struct sockaddr > saddr {
		}
	}
	rpc projection ret_sk_buff [alloc(caller)] *sock_alloc_send_skb( projection sk*  sk, long unsigned int  size, int  noblock, int [alloc_stack(callee), out] *  err ) {
		projection < struct sk_buff > ret_sk_buff {
			array<unsigned char, {{ptr->truesize}}>  [alloc(caller)] *data;
			unsigned int tail;
			unsigned int end;
			unsigned int len;
			unsigned int  truesize;
		}
		projection < struct sock > sk {
			u32 sk_priority;
			//int  sk_err;
			//projection sock_sk_socket* sk_socket;
		}
		projection < struct socket > sock_sk_socket {
		}
	}
/*rpc void  warn_slowpath_fmt( char*  file, int  line, char*  fmt ) {
}*/
	rpc_ptr int notifier_call( projection nb [bind(callee)] * nb,
			long unsigned int msg,
			casted<void *, projection info [alloc<{{sizeof(struct netdev_notifier_info)}}>(callee)] *> ptr) {

		projection < struct notifier_block > nb {
		}

		projection < struct netdev_notifier_info > info {
			projection net_device [alloc(callee)] *dev;
		}
		projection < struct net_device > net_device {
			int ifindex;
			unsigned short type;
		}
	}

	rpc int  register_netdevice_notifier( projection nb [alloc(callee)] *  nb ) {
		projection < struct notifier_block > nb {
			rpc_ptr notifier_call notifier_call;
		}
	}
	rpc int  unregister_netdevice_notifier( projection nb [bind(callee), dealloc(callee)] *  nb ) {
		projection < struct notifier_block > nb {
		}
	}
	rpc void  kfree_skb( projection skb*  skb ) {
		projection < struct sk_buff > skb {
		}
	}
	rpc projection ret_sk_buff [alloc(caller)] *skb_clone( projection skb* skb, unsigned int  gfp_mask ) {
		projection < struct sk_buff > ret_sk_buff {
			array< char, 48> cb;
			projection sk_buff_dev [alloc_once(caller)] * dev;
		}
		projection < struct sk_buff > skb {
			/*projection sk_buff_sk* sk;
			unsigned int [in, out] len;
			array<unsigned int, 0> [in, out] headers_end;
			unsigned int [in, out] tail;
			unsigned int [in, out] end;
			unsigned char* [in, out] head;
			unsigned char* [in, out] data;*/
		}
		projection < struct sock > sk_buff_sk {
		}
		projection < struct net_device > sk_buff_dev {
			int ifindex;
		}
	}
/*
rpc void  _raw_write_lock_bh( projection lock*  lock ) {
	projection < struct rwlock_t > lock {
	}
}
rpc void  _raw_write_unlock_bh( projection lock*  lock ) {
	projection < struct rwlock_t > lock {
	}
}*/

	rpc void [alloc<{{size}}>(caller)] *  __alloc_percpu( long unsigned int  size, long unsigned int  align ) {
	}

	rpc void  free_percpu( void*  ptr ) {
	}

	rpc int  sock_queue_rcv_skb( projection sk* sk, projection skb*  skb ) {
		projection < struct sock > sk {
		}
		projection < struct sk_buff > skb {
			array< char, 48> cb;
		}
	}

	rpc void  can_proto_unregister( const projection cp [bind(callee)] *  cp ) {
		projection < struct can_proto > cp {
		}
	}
	rpc int  can_proto_register( const projection cp [alloc(callee)] *  cp ) {
		projection < struct can_proto > cp {
			int type;
			int  protocol;
			projection _global_proto_ops [alloc(callee)] * ops;
			projection can_proto_prot [alloc(callee)] * prot;
		}
		projection < struct proto > can_proto_prot {
			array<char, 32> name;
			projection owner [alloc(callee)] *owner;
			unsigned int obj_size;
			rpc_ptr proto_init init;
		}
		projection <struct module> owner {
		}
	}

	rpc_ptr void func(projection skb [alloc(callee)] *skb, casted<void*,projection sock [bind(callee)] *> data) {
		projection < struct sk_buff > skb {
			projection sk_buff_sk [bind(callee)] * sk;
			unsigned int len;
		}
		projection < struct sock > sk_buff_sk {
		}
		projection < struct sock > sock {
		}
	}
	rpc void  can_rx_unregister( projection dev* dev, unsigned int  can_id, unsigned int  mask, rpc_ptr  func func, void* data) {
		projection < struct net_device > dev {
			unsigned short type;
		}
		projection < struct sock > sock {
		}
	}
	rpc int  can_rx_register( projection dev* dev, unsigned int  can_id, unsigned int  mask, rpc_ptr  func func, void* data, array<char, null> [alloc(callee)] *ident ) {
		projection < struct net_device > dev {
			unsigned short type;
		}
		projection < struct sock > sock {
		}
	}
	rpc int  can_send( projection skb* skb, int  loop ) {
		projection < struct sk_buff > skb {
			projection sk_buff_sk* sk;
			projection sk_buff_dev* dev;
			u32 priority;
			/*array< char, 48> [in, out] cb;
			unsigned int [in, out] len;
			array<unsigned int, 0> [in, out] headers_end;
			unsigned int [in, out] tail;
			unsigned int [in, out] end;
			unsigned char* [in, out] head;
			unsigned char* [in, out] data;*/
		}
		projection < struct sock > sk_buff_sk {
		}
		projection < struct net_device > sk_buff_dev {
			unsigned short  type;
		}
	}

        rpc int can_ioctl( projection sock [alloc_once(callee)] * sock, unsigned int  cmd, unsigned long  arg ) {
		projection < struct socket > sock {
		}
	}

	rpc unsigned int  datagram_poll(  projection file [alloc_once(callee)] *  file, projection sock [alloc_once(callee)] *  sock, projection wait [alloc_once(callee)] *  wait ) {
		projection < struct file > file {
		}
		projection < struct socket > sock {
		}
		projection < struct sock > socket_sk {
		}
		projection < struct poll_table_struct > wait {
		}
	}

	rpc_ptr int  proto_ops_ioctl( projection sock [alloc_once(callee)] *  sock, unsigned int  cmd, long unsigned int  arg ) {
		projection < struct socket > sock {
			//projection socket_sk* sk;
		}
		projection < struct sock > socket_sk {
		}
	}
	/*
	rpc long unsigned int  copy_from_iter( void* [in, out] addr, long unsigned int  bytes, projection i*  i ) {
		projection < struct iov_iter > i {
		}
	}
	rpc long unsigned int  copy_to_iter( const void* [in, out] addr, long unsigned int  bytes, projection i*  i ) {
		projection < struct iov_iter > i {
		}
	}*/
	rpc_ptr unsigned int  proto_ops_poll( projection file [alloc_once(callee)] *  file, projection sock [alloc_once(callee)] *  sock, projection wait [alloc_once(callee)] *  wait ) {
		projection < struct file > file {
		}
		projection < struct socket > sock {
			//projection socket_sk* sk;
		}
		projection < struct sock > socket_sk {
		}
		projection < struct poll_table_struct > wait {
		}
	}
	rpc void  release_sock( projection sk*  sk ) {
		projection < struct sock > sk {
		}
	}
	rpc void  skb_free_datagram( projection sk *sk, projection skb *skb ) {
		projection < struct sock > sk {
		}
		projection < struct sk_buff > skb {
		}
	}
	rpc projection ret_sk_buff [alloc(caller)] * skb_recv_datagram( projection sk*  sk, unsigned int  flags, int  noblock, int [alloc_stack(callee), out] *err ) {
		projection < struct sk_buff > ret_sk_buff {
			unsigned int  len;
			array<unsigned char, {{ptr->len}}>  [alloc(caller)] *data;
			array<char, 48> cb;
		}
		projection < struct sock > sk {
			int  sk_err;
		}
	}
	rpc_ptr long proto_ops_sendpage( projection sock [alloc_once(callee)] *  sock, projection page [alloc(callee)] *  page, int  offset, long unsigned int  size, int  flags ) {
		projection < struct socket > sock {
		}
		projection < struct page > page {
		}
	}
	rpc void  lock_sock_nested( projection sk*  sk, int [unused] subclass ) {
		projection < struct sock > sk {
		}
	}
	rpc void  __sock_recv_ts_and_drops( projection msg*  msg, projection sk*  sk,
			projection skb*  skb ) {
		projection < struct msghdr > msg {
		}
		projection < struct sock > sk {
			//ktime  sk_stamp;
			unsigned long  sk_flags;
		}
		projection < struct sk_buff > skb {
			u32 [out] priority;
		}
	}
	rpc void  __sock_tx_timestamp( unsigned short  tsflags, unsigned char [in, out, alloc(callee), dealloc(callee)] *tx_flags ) {
	}
	rpc array<unsigned char, {{len}}> [alloc(caller)] *  skb_put( projection skb*  skb, unsigned int  len ) {
		projection < struct sk_buff > skb {
			unsigned int [in, out] tail;
			unsigned int [in, out] end;
			// TODO: might need an operation syntax (local_data += len);
			//unsigned int *data;
		}
	}

	// XXX: To avoid manipulating sk_refcnt, call out
	rpc void  lvd_sock_put( projection sk* sk ) {
		projection < struct sock > sk {
		}
	}

	rpc int  sock_no_mmap( projection file* [unused] file, projection sock* [unused] sock, projection vma* [unused] vma ) {
		projection < struct file > file {
		}
		projection < struct socket > sock {
		}
		projection < struct vm_area_struct > vma {
		}
	}
	rpc int  sock_no_shutdown( projection sock* [unused] sock, int [unused] how ) {
		projection < struct socket > sock {
		}
	}
	rpc int  sock_no_listen( projection sock* [unused] sock, int [unused] backlog ) {
		projection < struct socket > sock {
		}
	}
	rpc int  sock_no_accept( projection sock* [unused] sock, projection newsock* [unused] newsock, int [unused] flags ) {
		projection < struct socket > sock {
		}
		projection < struct socket > newsock {
		}
	}
	rpc int  sock_no_socketpair( projection sock1* [unused] sock1, projection sock2* [unused] sock2 ) {
		projection < struct socket > sock1 {
		}
		projection < struct socket > sock2 {
		}
	}
	rpc int  sock_no_connect( projection sock* [unused] sock, projection saddr* [unused] saddr, int [unused] len, int [unused] flags ) {
		projection < struct socket > sock {
		}
		projection < struct sockaddr > saddr {
		}
	}
	rpc long sock_no_sendpage( projection sock* [unused] sock, projection page* [unused] page, int  offset, long unsigned int  size, int  flags ) {
		projection < struct socket > sock {
		}
		projection < struct page > page {
		}
	}
	projection < struct proto_ops > _global_proto_ops {
		int family;
		rpc_ptr proto_ops_release release;
		rpc_ptr proto_ops_bind bind;
		rpc_ptr proto_ops_connect connect;
		rpc_ptr proto_ops_socketpair socketpair;
		rpc_ptr proto_ops_accept accept;
		rpc_ptr proto_ops_getname getname;
		rpc_ptr proto_ops_poll poll;
		rpc_ptr proto_ops_ioctl ioctl;
		rpc_ptr proto_ops_listen listen;
		rpc_ptr proto_ops_shutdown shutdown;
		rpc_ptr proto_ops_setsockopt setsockopt;
		rpc_ptr proto_ops_getsockopt getsockopt;
		rpc_ptr proto_ops_sendmsg sendmsg;
		rpc_ptr proto_ops_recvmsg recvmsg;
		rpc_ptr proto_ops_mmap mmap;
		rpc_ptr proto_ops_sendpage sendpage;
	}

	rpc int lvd_memcpy_to_msg(projection msg *msg, void *data, int len) {
		projection < struct msghdr > msg {
		}
	}
	rpc int lvd_memcpy_from_msg(void *data, projection msg *msg, int len) {
		projection < struct msghdr > msg {
		}
	}

	rpc void lvd_dev_put(projection net_device *dev) {
		projection < struct net_device > net_device {
		}
	}

	rpc void lvd_sock_orphan(projection sock *sk) {
		projection < struct sock > sock {
		}
	}

	rpc unsigned long get_jiffies() {
	}

}
