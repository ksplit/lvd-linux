// Nullnet does *not* use the dev_addr field

module kernel {
    rpc void netif_carrier_on( projection dev *dev ) {
        projection < struct net_device > dev {
            const projection _global_netdev_ops *netdev_ops;
        }
    }

    rpc void netif_carrier_off( projection dev *dev ) {
        projection < struct net_device > dev {
        }
    }

    // TODO: what to do with this guy
    //  rpc void free_percpu(void *ptr) {
    //  }

    rpc int register_netdevice( projection dev *dev ) {
        projection < struct net_device > dev {
            unsigned long long [out] features;
            unsigned long long [out] hw_features;
            unsigned long long [out] hw_enc_features;
            unsigned int  flags;
            unsigned int  priv_flags;
        }
    }

    rpc void consume_skb( projection skb  *skb ) {
        projection < struct sk_buff > skb {
            unsigned int  len;
	    //unsigned char *data;
        }
    }

    rpc projection ret_net_device [bind(caller)]* alloc_netdev_mqs(
        int sizeof_priv,
        const string [alloc(callee)]* name,
        unsigned char name_assign_type,
        rpc_ptr setup setup,
        unsigned int txqs,
        unsigned int rxqs
    ) {
        projection < struct net_device > ret_net_device {
            unsigned int [out] priv_flags;
        }
    }

    rpc void free_netdev( projection dev  *dev ) {
        projection < struct net_device > dev {
        }
    }

    rpc void rtnl_lock(  ) {
    }

    rpc void rtnl_unlock(  ) {
    }

    rpc void rtnl_link_unregister( projection _global_rtnl_link_ops [bind(callee)] *_global_rtnl_link_ops ) {
    }

    rpc void __rtnl_link_unregister( projection _global_rtnl_link_ops [bind(callee)] *_global_rtnl_link_ops ) {
    }

    rpc int __rtnl_link_register(projection _global_rtnl_link_ops [alloc(callee)]* _global_rtnl_link_ops) {
        projection < struct rtnl_link_ops > _global_rtnl_link_ops {
            string [alloc(callee)]* kind;
            rpc_ptr setup setup;
            rpc_ptr validate validate;
        }
    }

    // TODO: what do with you
    //  rpc void* __alloc_percpu_gfp( unsigned long long size, unsigned long long align, unsigned int gfp ) {
    //  }

    rpc void ether_setup( projection dev  *dev ) {
        projection < struct net_device > dev {
            unsigned int [out] flags;
            unsigned int [in, out] priv_flags;
        }
    }

    rpc int eth_validate_addr( projection dev  *dev ) {
        projection < struct net_device > dev {
        }
    }

    // FIXME: p is actually a void*
    rpc int eth_mac_addr( projection dev  *dev, projection p *p ) {
        projection < struct net_device > dev {
            unsigned int  priv_flags;
        }

        projection < struct sockaddr > p {
        }
    }

    rpc_ptr void setup( projection dev [alloc(callee)]*dev ) {
        projection < struct net_device > dev {
            unsigned long long [in, out] features;
            unsigned long long [in, out] hw_features;
            unsigned long long [in, out] hw_enc_features;
            const projection _global_netdev_ops[alloc(caller)] * [out] netdev_ops;
            const projection _global_ethtool_ops[alloc(caller)] * [out] ethtool_ops;
            unsigned int [in, out] flags;
            unsigned int [in, out] priv_flags;
        }
    }

    rpc_ptr void get_drvinfo( projection dev [bind(callee)] *dev, projection info [alloc(callee), out] *info ) {
        projection < struct net_device > dev {
        }

        projection < struct ethtool_drvinfo > info {
		    array<char, 32> driver;
		    array<char, 32> version;
        }
    }

    rpc_ptr int ndo_init( projection dev [bind(callee)] *dev ) {
        projection < struct net_device > dev {
        }
    }

    rpc_ptr void ndo_uninit( projection dev [bind(callee)]  *dev ) {
        projection < struct net_device > dev {
        }
    }

    // NOTE: exploit promotion and convert enum to unsigned long long
    rpc_ptr long long ndo_start_xmit( projection skb [alloc(callee)] *skb, projection dev  [bind(callee)] *dev ) {
        projection < struct sk_buff > skb {
            unsigned int  len;
	    unsigned char [shared<skb_data_pool>]  *data;
        }

        projection < struct net_device > dev {
        }
    }

    rpc_ptr void ndo_set_rx_mode( projection dev  [bind(callee)] *dev ) {
        projection < struct net_device > dev {
        }
    }

    rpc_ptr int ndo_validate_addr(projection net_device [bind(callee)] *dev) {
        projection < struct net_device > dev {
        }
    }

	rpc_ptr int ndo_set_mac_address(projection net_device [bind(callee)] *dev, void *addr) {
        projection < struct net_device > dev {
        }
    }

    rpc_ptr projection ret_rtnl_link_stats64* ndo_get_stats64( projection dev [bind(callee)]  *dev, projection stats  [alloc(callee)] *stats ) {
        projection < struct net_device > dev {
        }

        projection < struct rtnl_link_stats64 > stats {
            unsigned long long [out] tx_packets;
            unsigned long long [out] tx_bytes;
        }

        projection < struct rtnl_link_stats64 > ret_rtnl_link_stats64 {
        }
    }

    rpc_ptr int ndo_change_carrier( projection dev  [bind(callee)] *dev, bool new_carrier ) {
        projection < struct net_device > dev {
            const projection _global_netdev_ops *netdev_ops;
        }
    }

    rpc_ptr int validate( projection tb  **tb, projection data  **data ) {
        projection < struct nlattr > tb {
        }

        projection < struct nlattr > data {
        }
    }

    projection < struct net_device_ops > _global_netdev_ops {
        rpc_ptr ndo_init ndo_init;
        rpc_ptr ndo_uninit ndo_uninit;
        rpc_ptr ndo_start_xmit ndo_start_xmit;
        rpc_ptr ndo_validate_addr ndo_validate_addr;
        rpc_ptr ndo_set_rx_mode ndo_set_rx_mode;
        rpc_ptr ndo_set_mac_address ndo_set_mac_address;
        rpc_ptr ndo_get_stats64 ndo_get_stats64;
        rpc_ptr ndo_change_carrier ndo_change_carrier;
    }

    projection < struct ethtool_ops > _global_ethtool_ops {
        rpc_ptr get_drvinfo get_drvinfo;
    }

    projection < struct rtnl_link_ops > _global_rtnl_link_ops {
        rpc_ptr setup setup;
        rpc_ptr validate validate;
    }
}
